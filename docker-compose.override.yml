services:
  postgres:
    image: postgres:16-alpine
    container_name: legal-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-legaldb}
      - POSTGRES_USER=${POSTGRES_USER:-legaluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-legalpass}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - legal-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legal-network

  Legal.service.migration:
    image: ${DOCKER_REGISTRY-}migration
    # Rely on ENTRYPOINT and environment fallback logic (no CLI args required)
    environment:
      - ConnectionStrings__Postgres=Host=postgres:5432;Database=legaldb;Username=legaluser;Password=legalpass
      - MIGRATION_AUTO_RUN=y   # triggers automatic --update-database=y with ContextNumber=-1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - legal-network
  
  Legal.api.webapi:
    user: root
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=4020
      - ConnectionStrings__Postgres=Host=postgres:5432;Database=legaldb;Username=legaluser;Password=legalpass
    volumes:
      - ${STORAGE_PATH}:/app/uploads:rw
    ports:
      - "${PORT}:4020"
    restart: always
    depends_on:
      - postgres
    networks:
      - legal-network
 
networks:
  legal-network:
    name: legal-network

volumes:
  legal-postgres-data: